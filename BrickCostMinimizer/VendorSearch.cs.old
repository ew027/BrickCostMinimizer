using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Collections;
using System.IO;

using Facet.Combinatorics;

namespace Bricklink {
    class VendorSearch {
        private Dictionary<int, List<ResultSet>> m_results;
        private List<Seller> m_sellers;
        private int m_maxResults;
        private int m_maxCombinations;
        private List<WantedListItem> m_items;
        private Dictionary<string, WantedListItem> m_itemsLookup;
        private Dictionary<string, Seller> m_sellerLookup;
        private Dictionary<string, string> m_imageUrls;
        private string m_outputDir;

        private int m_resultsProcessed;

        public int GetNumberProcessed() {
            return m_resultsProcessed;
        }

        public VendorSearch(List<Seller> sellers, int maxResults, int maxCombinations, List<WantedListItem> items, Dictionary<string, string> imageUrls, string outputDir) {
            m_results = new Dictionary<int,List<ResultSet>>();
            m_sellers = sellers;
            m_maxCombinations = maxCombinations;
            m_maxResults = maxResults;
            m_items = items;
            m_imageUrls = imageUrls;
            m_outputDir = outputDir;

            // create a dictionary from item list for lookup purposes
            m_itemsLookup = new Dictionary<string, WantedListItem>();
            for (int i = 0; i < items.Count; i++) {
                m_itemsLookup.Add(items[i].Id + "-" + items[i].ColorId, items[i]);
            }

            // create a dictionary from seller list for lookup purposes
            m_sellerLookup = new Dictionary<string, Seller>();
            for (int i = 0; i < sellers.Count; i++) {
                m_sellerLookup.Add(sellers[i].Storename, sellers[i]);
            }
        }

        public void Execute() {

            int[] sellerIdx = new int[m_sellers.Count];

            // create an array of the seller indices
            for (int i = 0; i < m_sellers.Count; i++) {
                sellerIdx[i] = i;
            }

            for (int i = 1; i <= m_maxCombinations; i++) {
                m_results.Add(i, new List<ResultSet>());

                Combinations<int> combinations = new Combinations<int>(sellerIdx, i);

                Console.WriteLine("Searching " + combinations.Count + " combinations of " + i + " sellers...");

                int j = 0;
                foreach (IList<int> c in combinations) {
                    BitArray baseArray = new BitArray(m_items.Count);

                    foreach (var k in c) {
                        Seller seller = m_sellers[k];

                        baseArray.Or(seller.ItemAvailiabilityArray);
                    }

                    if (Utilities.GetBitArrayCardinality(baseArray) == m_items.Count) {
                        ResultSet rs = new ResultSet(m_items);
                        rs.Id = j;

                        foreach (var k in c) {
                            Seller seller = m_sellers[k];

                            rs.Sellers.Add(seller.Storename);

                            foreach (var lot in seller.AvailableItems) {
                                rs.CurrentStatus[lot.GetId()] += lot.Quantity;
                                rs.CurrentItems.Add(lot);
                            }
                        }

                        if (rs.IsComplete()) {
                            rs.CalculateCost();
                            m_results[i].Add(rs);
                            //Console.WriteLine("Valid combination found!");
                        } else {
                            //rs.CheckMissing(missingItems);
                        }
                    }


                    if (j % 100000 == 0) {
                        Console.WriteLine(j.ToString());
                    }
                    j++;
                }

                Console.WriteLine(j.ToString() + " searches complete, " + m_results[i].Count + " valid combinations found");
            }
        }

        

        public void Export() {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("<html><head><style> table { border-collapse: collapse; } * {font-family: arial; font-size: 1em; } </style></head><body><h3>Results generated on " + DateTime.Now + "</h3><p><a href=\"wantedlist.html\" target=\"details\">Wanted list</a></p>");

            for (int i = 1; i <= m_maxCombinations; i++) {
                sb.AppendLine("<p><b>" + i + " vendor solutions:</b></p><ul>");

                if (m_results[i].Count > 0) {

                    List<ResultSet> results = m_results[i].OrderBy(o => o.Price).ToList();

                    int limit = (results.Count > 50) ? 50 : results.Count;

                    for (int j = 0; j < limit; j++) {
                        var rs = results[j];

                        sb.AppendLine("<li><a href=\"" + i + "-" + j + ".html\" target=\"details\">" + string.Join(",", rs.Sellers.ToArray()) + " (&pound;" + rs.Price + ")</a></li>");
                        rs.Export("", m_outputDir + i + "-" + j + ".html", m_itemsLookup, m_imageUrls, m_sellerLookup);
                    }
                } else {
                    sb.AppendLine("<li>No results</li>");
                }

                sb.AppendLine("</ul>");
            }

            sb.AppendLine("</body></html>");
            
            this.ExportWantedList();

            StreamWriter logger = File.CreateText(m_outputDir + "resultlist.html");

            logger.Write(sb.ToString());

            logger.Close();
        }

        private void ExportWantedList() {
            StreamWriter logger = File.CreateText(m_outputDir + "wantedlist.html");

            logger.Write("<html><head><style> table { border-collapse: collapse; } * {font-family: arial; font-size: 1em; } </style></head><body>");

            logger.Write("<table border=\"1\" width=\"100%\" cellspacing=\"0\" cellpadding=\"3\"><tr><th>&nbsp;</th><th>Part</th><th>Quantity Reqd</th><th>Max Price</th><th>Lots available</th></tr>");
            foreach (var id in m_itemsLookup.Keys) {
                var item = m_itemsLookup[id];
                logger.WriteLine("<tr><td><img src=\"" + m_imageUrls[item.GetId()] + "\" /></td><td>" + item.Id + " - " + m_itemsLookup[item.GetId()].Name + " (" + m_itemsLookup[item.GetId()].ColorName + ")</td><td align=\"center\">" + item.Quantity + "</td><td>&pound;" + Math.Round(item.Price, 2) + "</td><td align=\"center\">" + item.AvailableItems.Count + "</td></tr>");

            }
            logger.Write("</table></body></html>");

            logger.Close();
        }
    }
}
